// Code generated by php2go. PLEASE DO NOT EDIT.
package full

import (
   "fmt"
)

type ValueType uint8

const (
	Constantint64 ValueType = iota
	Constantfloat64 ValueType = iota
	Constantstring ValueType = iota
	Constantbool ValueType = iota
	ConstantElementTypeint64 ValueType = iota
	ConstantmapWithKeystringWithValueint64 ValueType = iota
)

type Var struct {
	Val  interface{}
	Type ValueType
}

func NewVar() Var {
	return Var{}
}

func (v *Var) Bool() bool {
	switch v.Type {
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	case Constantint64:
		return v.Val.(int64) != 0
	case Constantfloat64:
		return v.Val.(float64) != 0
	case Constantstring:
		return v.Val.(string) != ""
	case Constantbool:
		return v.Val.(bool)
	}

	return false
}

func (v *Var) String() string {
	switch v.Type {
	case Constantint64:
		return fmt.Sprint(v.Val.(int64))
	case Constantfloat64:
		return fmt.Sprint(v.Val.(float64))
	case Constantstring:
		return v.Val.(string)
	case Constantbool:
		return fmt.Sprint(v.Val.(bool))
	case ConstantElementTypeint64:
		return ""
	case ConstantmapWithKeystringWithValueint64:
		return ""
	}

	return ""
}


type CompareType uint8

const (
	Equal CompareType = iota
	NotEqual
	Greater
	GreaterEqual
	Smaller
	SmallerEqual
)

func (v *Var) CompareWithint64(val int64, compare CompareType) bool {
	switch v.Type {
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	case Constantint64:
		switch compare {
		case Equal:
			return v.Val.(int64) == val
		case NotEqual:
			return v.Val.(int64) != val
		case Greater:
			return v.Val.(int64) > val
		case GreaterEqual:
			return v.Val.(int64) >= val
		case Smaller:
			return v.Val.(int64) < val
		case SmallerEqual:
			return v.Val.(int64) <= val
		}
	case Constantfloat64:
		return false
	case Constantstring:
		return false
	case Constantbool:
		return false
	}

	return false
}

func (v *Var) CompareWithfloat64(val float64, compare CompareType) bool {
	switch v.Type {
	case ConstantmapWithKeystringWithValueint64:
		return false
	case Constantint64:
		return false
	case Constantfloat64:
		switch compare {
		case Equal:
			return v.Val.(float64) == val
		case NotEqual:
			return v.Val.(float64) != val
		case Greater:
			return v.Val.(float64) > val
		case GreaterEqual:
			return v.Val.(float64) >= val
		case Smaller:
			return v.Val.(float64) < val
		case SmallerEqual:
			return v.Val.(float64) <= val
		}
	case Constantstring:
		return false
	case Constantbool:
		return false
	case ConstantElementTypeint64:
		return false
	}

	return false
}

func (v *Var) CompareWithstring(val string, compare CompareType) bool {
	switch v.Type {
	case Constantfloat64:
		return false
	case Constantstring:
		switch compare {
		case Equal:
			return v.Val.(string) == val
		case NotEqual:
			return v.Val.(string) != val
		case Greater:
			return v.Val.(string) > val
		case GreaterEqual:
			return v.Val.(string) >= val
		case Smaller:
			return v.Val.(string) < val
		case SmallerEqual:
			return v.Val.(string) <= val
		}
	case Constantbool:
		return false
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	case Constantint64:
		return false
	}

	return false
}

func (v *Var) CompareWithbool(val bool, compare CompareType) bool {
	switch v.Type {
	case Constantint64:
		return false
	case Constantfloat64:
		return false
	case Constantstring:
		return false
	case Constantbool:
		switch compare {
		case Equal:
			return v.Val.(bool) == val
		case NotEqual:
			return v.Val.(bool) != val
		case Greater:
			return false
		case GreaterEqual:
			return false
		case Smaller:
			return false
		case SmallerEqual:
			return false
		}
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	}

	return false
}

func (v *Var) CompareWithElementTypeint64(val []int64, compare CompareType) bool {
	switch v.Type {
	case Constantint64:
		return false
	case Constantfloat64:
		return false
	case Constantstring:
		return false
	case Constantbool:
		return false
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	}

	return false
}

func (v *Var) CompareWithmapWithKeystringWithValueint64(val map[string]int64, compare CompareType) bool {
	switch v.Type {
	case ConstantmapWithKeystringWithValueint64:
		return false
	case Constantint64:
		return false
	case Constantfloat64:
		return false
	case Constantstring:
		return false
	case Constantbool:
		return false
	case ConstantElementTypeint64:
		return false
	}

	return false
}

func (v *Var) Getstring() string {
	return v.Val.(string)
}

func (v *Var) Getbool() bool {
	return v.Val.(bool)
}

func (v *Var) GetElementTypeint64() []int64 {
	return v.Val.([]int64)
}

func (v *Var) GetmapWithKeystringWithValueint64() map[string]int64 {
	return v.Val.(map[string]int64)
}

func (v *Var) Getint64() int64 {
	return v.Val.(int64)
}

func (v *Var) Getfloat64() float64 {
	return v.Val.(float64)
}

func (v *Var) Setstring(val string)  {
	v.Val = val
	v.Type = Constantstring
}

func (v *Var) Setbool(val bool)  {
	v.Val = val
	v.Type = Constantbool
}

func (v *Var) SetElementTypeint64(val []int64)  {
	v.Val = val
	v.Type = ConstantElementTypeint64
}

func (v *Var) SetmapWithKeystringWithValueint64(val map[string]int64)  {
	v.Val = val
	v.Type = ConstantmapWithKeystringWithValueint64
}

func (v *Var) Setint64(val int64)  {
	v.Val = val
	v.Type = Constantint64
}

func (v *Var) Setfloat64(val float64)  {
	v.Val = val
	v.Type = Constantfloat64
}

func Foo() {
	a := 100
	b := 1.5
	c := "Hello"
	d := true
	fmt.Print(a)
	fmt.Print(b)
	fmt.Print(c)
	fmt.Print(d)
	var f Var
	var e int64
	if a == 100 {
		e = 10
	} else {
		e = 10
	}
	fmt.Print(e)
	if a == 100 {
		f.Setint64(10)
	} else {
		f.Setstring("10")
	}
	fmt.Print(f.String())
	f.SetElementTypeint64([]int64{1, 2, 3})
	fmt.Print(f.GetElementTypeint64())
	fmt.Print(f.GetElementTypeint64()[1])
	f.GetElementTypeint64()[1] = 10
	fmt.Print(f.GetElementTypeint64())
	g := []int64{1, 2, 3}
	fmt.Print(g)
	g = append(g, 100)
	fmt.Print(g)
	f.SetmapWithKeystringWithValueint64(map[string]int64{"Key1": 1, "Key2": 2, "Key3": 3})
	fmt.Print(f.GetmapWithKeystringWithValueint64())
	fmt.Print(f.GetmapWithKeystringWithValueint64()["Key1"])
	f.GetmapWithKeystringWithValueint64()["Key1"] = 5
	fmt.Print(f.GetmapWithKeystringWithValueint64())
	i := 0
	for i < 20 {
		fmt.Print(i)
		i++
	}
	for i = 0; i < 20; i++ {
		fmt.Print(i + 5)
	}
	qw := 1
	fmt.Print(float64(qw) + 5.5 - 56.56 * float64(6) / float64(56))
}

