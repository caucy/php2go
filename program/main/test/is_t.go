// Code generated by php2go. PLEASE DO NOT EDIT.
package is_t

import (
	"fmt"
)

type ValueType uint8

const (
	Constantint64   ValueType = iota
	Constantfloat64 ValueType = iota
	Constantstring  ValueType = iota
	Constantbool    ValueType = iota
	Constantnull    ValueType = iota
)

type Var struct {
	Val  interface{}
	Type ValueType
}

func NewVar() Var {
	return Var{}
}

func (v *Var) Bool() bool {
	switch v.Type {
	case Constantint64:
		return v.Val.(int64) != 0
	case Constantstring:
		return v.Val.(string) != ""
	}

	return false
}

func (v *Var) String() string {
	switch v.Type {
	case Constantint64:
		return fmt.Sprint(v.Val.(int64))
	case Constantstring:
		return v.Val.(string)
	}

	return ""
}

type CompareType uint8

const (
	Equal CompareType = iota
	NotEqual
	Greater
	GreaterEqual
	Smaller
	SmallerEqual
)

func (v *Var) CompareWithint64(val int64, compare CompareType) bool {
	switch v.Type {
	case Constantint64:
		switch compare {
		case Equal:
			return v.Val.(int64) == val
		case NotEqual:
			return v.Val.(int64) != val
		case Greater:
			return v.Val.(int64) > val
		case GreaterEqual:
			return v.Val.(int64) >= val
		case Smaller:
			return v.Val.(int64) < val
		case SmallerEqual:
			return v.Val.(int64) <= val
		}
	case Constantstring:
		return false
	}

	return false
}

func (v *Var) CompareWithstring(val string, compare CompareType) bool {
	switch v.Type {
	case Constantint64:
		return false
	case Constantstring:
		switch compare {
		case Equal:
			return v.Val.(string) == val
		case NotEqual:
			return v.Val.(string) != val
		case Greater:
			return v.Val.(string) > val
		case GreaterEqual:
			return v.Val.(string) >= val
		case Smaller:
			return v.Val.(string) < val
		case SmallerEqual:
			return v.Val.(string) <= val
		}
	}

	return false
}

func (v *Var) Getint64() int64 {
	return v.Val.(int64)
}

func (v *Var) Getstring() string {
	return v.Val.(string)
}

func (v *Var) Setint64(val int64) {
	v.Val = val
	v.Type = Constantint64
}

func (v *Var) Setstring(val string) {
	v.Val = val
	v.Type = Constantstring
}

func Isint64(val Var) bool {
	return val.Type == Constantint64
}

func Isfloat64(val Var) bool {
	return val.Type == Constantfloat64
}

func Isstring(val Var) bool {
	return val.Type == Constantstring
}

func Isbool(val Var) bool {
	return val.Type == Constantbool
}

func Isnull(val Var) bool {
	return val.Type == Constantnull
}

func Isint64Simple(val interface{}) bool {
	_, ok := val.(int64)
	return ok
}

func Isfloat64Simple(val interface{}) bool {
	_, ok := val.(float64)
	return ok
}

func IsstringSimple(val interface{}) bool {
	_, ok := val.(string)
	return ok
}

func IsboolSimple(val interface{}) bool {
	_, ok := val.(bool)
	return ok
}

func Foo() {
	a := int64(100)
	if Isint64Simple(a) {
		fmt.Print("integer\n")
	} else {
		fmt.Print("not integer\n")
	}
	b := NewVar()
	b.Setint64(int64(100))
	b.Setstring("qwerty")
	if Isint64(b) {
		fmt.Print("integer")
	} else {
		if Isfloat64(b) {
			fmt.Print("float")
		} else {
			if Isstring(b) {
				fmt.Print("string")
			} else {
				if Isnull(b) {
					fmt.Print("null")
				} else {
					fmt.Print("undefined")
				}
			}
		}
	}
}
