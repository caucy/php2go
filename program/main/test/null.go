// Code generated by php2go. PLEASE DO NOT EDIT.
package null

import (
	"fmt"
)

type ValueType uint8

const (
	Constantint64 ValueType = iota
	Constantnull
)

type Var struct {
	Val  interface{}
	Type ValueType
}

func NewVar() Var {
	return Var{}
}

func (v *Var) Bool() bool {
	switch v.Type {
	case Constantint64:
		return v.Val.(int64) != 0
	}

	return false
}

func (v *Var) String() string {
	switch v.Type {
	case Constantint64:
		return fmt.Sprint(v.Val.(int64))
	case Constantnull:
		return "null"
	}

	return ""
}

type CompareType uint8

const (
	Equal CompareType = iota
	NotEqual
	Greater
	GreaterEqual
	Smaller
	SmallerEqual
)

func (v *Var) CompareWithint64(val int64, compare CompareType) bool {
	switch v.Type {
	case Constantint64:
		switch compare {
		case Equal:
			return v.Val.(int64) == val
		case NotEqual:
			return v.Val.(int64) != val
		case Greater:
			return v.Val.(int64) > val
		case GreaterEqual:
			return v.Val.(int64) >= val
		case Smaller:
			return v.Val.(int64) < val
		case SmallerEqual:
			return v.Val.(int64) <= val
		}
	}

	return false
}

func (v *Var) CompareWithnull(val int64, compare CompareType) bool {
	switch compare {
	case Equal:
		return v.Type == Constantnull
	case NotEqual:
		return v.Type != Constantnull
	case Greater:
		return false
	case GreaterEqual:
		return v.Type == Constantnull
	case Smaller:
		return false
	case SmallerEqual:
		return v.Type == Constantnull
	}

	return false
}

func (v *Var) Getint64() int64 {
	return v.Val.(int64)
}

func (v *Var) Setint64(val int64) {
	v.Val = val
	v.Type = Constantint64
}

func (v *Var) Getnull() int64 {
	return v.Val.(int64)
}

func (v *Var) Setnull() {
	v.Val = 0
	v.Type = Constantnull
}

func Foo() Var {
	a := 100
	if a > 50 {
		return Var{Val: 0, Type: Constantnull}
	} else {
		return Var{Val: 5, Type: Constantint64}
	}
}

func Foo2() {
	a := 0
	b := NewVar()
	b = Foo()
	if b.CompareWithnull(0, Equal) {
		fmt.Print(100)
	} else {
		fmt.Print(a)
	}
}
