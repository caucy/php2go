// Core file
// Code generated by php2go. PLEASE DO NOT EDIT.
package full

import (
	"fmt"
)

type ValueType uint8

const (
	Constantint64                          ValueType = iota
	Constantfloat64                        ValueType = iota
	Constantstring                         ValueType = iota
	Constantbool                           ValueType = iota
	ConstantElementTypeint64               ValueType = iota
	ConstantmapWithKeystringWithValueint64 ValueType = iota
	Constantnull                           ValueType = iota
)

type Var struct {
	Val  interface{}
	Type ValueType
}

func NewVar() Var {
	return Var{}
}

func (v *Var) Bool() bool {
	switch v.Type {
	case Constantint64:
		return v.Val.(int64) != 0
	case Constantfloat64:
		return v.Val.(float64) != 0
	case Constantstring:
		return v.Val.(string) != ""
	case Constantbool:
		return v.Val.(bool)
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	}

	return false
}

func (v *Var) String() string {
	switch v.Type {
	case ConstantElementTypeint64:
		return ""
	case ConstantmapWithKeystringWithValueint64:
		return ""
	case Constantint64:
		return fmt.Sprint(v.Val.(int64))
	case Constantfloat64:
		return fmt.Sprint(v.Val.(float64))
	case Constantstring:
		return v.Val.(string)
	case Constantbool:
		return fmt.Sprint(v.Val.(bool))
	}

	return ""
}

type CompareType uint8

const (
	Equal CompareType = iota
	NotEqual
	Greater
	GreaterEqual
	Smaller
	SmallerEqual
)

func (v *Var) CompareWithbool(val bool, compare CompareType) bool {
	switch v.Type {
	case Constantint64:
		return false
	case Constantfloat64:
		return false
	case Constantstring:
		return false
	case Constantbool:
		switch compare {
		case Equal:
			return v.Val.(bool) == val
		case NotEqual:
			return v.Val.(bool) != val
		case Greater:
			return false
		case GreaterEqual:
			return false
		case Smaller:
			return false
		case SmallerEqual:
			return false
		}
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	}

	return false
}

func (v *Var) CompareWithElementTypeint64(val []int64, compare CompareType) bool {
	switch v.Type {
	case Constantstring:
		return false
	case Constantbool:
		return false
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	case Constantint64:
		return false
	case Constantfloat64:
		return false
	}

	return false
}

func (v *Var) CompareWithmapWithKeystringWithValueint64(val map[string]int64, compare CompareType) bool {
	switch v.Type {
	case Constantbool:
		return false
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	case Constantint64:
		return false
	case Constantfloat64:
		return false
	case Constantstring:
		return false
	}

	return false
}

func (v *Var) CompareWithint64(val int64, compare CompareType) bool {
	switch v.Type {
	case Constantfloat64:
		return false
	case Constantstring:
		return false
	case Constantbool:
		return false
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	case Constantint64:
		switch compare {
		case Equal:
			return v.Val.(int64) == val
		case NotEqual:
			return v.Val.(int64) != val
		case Greater:
			return v.Val.(int64) > val
		case GreaterEqual:
			return v.Val.(int64) >= val
		case Smaller:
			return v.Val.(int64) < val
		case SmallerEqual:
			return v.Val.(int64) <= val
		}
	}

	return false
}

func (v *Var) CompareWithfloat64(val float64, compare CompareType) bool {
	switch v.Type {
	case Constantint64:
		return false
	case Constantfloat64:
		switch compare {
		case Equal:
			return v.Val.(float64) == val
		case NotEqual:
			return v.Val.(float64) != val
		case Greater:
			return v.Val.(float64) > val
		case GreaterEqual:
			return v.Val.(float64) >= val
		case Smaller:
			return v.Val.(float64) < val
		case SmallerEqual:
			return v.Val.(float64) <= val
		}
	case Constantstring:
		return false
	case Constantbool:
		return false
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	}

	return false
}

func (v *Var) CompareWithstring(val string, compare CompareType) bool {
	switch v.Type {
	case Constantint64:
		return false
	case Constantfloat64:
		return false
	case Constantstring:
		switch compare {
		case Equal:
			return v.Val.(string) == val
		case NotEqual:
			return v.Val.(string) != val
		case Greater:
			return v.Val.(string) > val
		case GreaterEqual:
			return v.Val.(string) >= val
		case Smaller:
			return v.Val.(string) < val
		case SmallerEqual:
			return v.Val.(string) <= val
		}
	case Constantbool:
		return false
	case ConstantElementTypeint64:
		return false
	case ConstantmapWithKeystringWithValueint64:
		return false
	}

	return false
}

func (v *Var) Getfloat64() float64 {
	return v.Val.(float64)
}

func (v *Var) Getstring() string {
	return v.Val.(string)
}

func (v *Var) Getbool() bool {
	return v.Val.(bool)
}

func (v *Var) GetElementTypeint64() []int64 {
	return v.Val.([]int64)
}

func (v *Var) GetmapWithKeystringWithValueint64() map[string]int64 {
	return v.Val.(map[string]int64)
}

func (v *Var) Getint64() int64 {
	return v.Val.(int64)
}

func (v *Var) Setstring(val string) {
	v.Val = val
	v.Type = Constantstring
}

func (v *Var) Setbool(val bool) {
	v.Val = val
	v.Type = Constantbool
}

func (v *Var) SetElementTypeint64(val []int64) {
	v.Val = val
	v.Type = ConstantElementTypeint64
}

func (v *Var) SetmapWithKeystringWithValueint64(val map[string]int64) {
	v.Val = val
	v.Type = ConstantmapWithKeystringWithValueint64
}

func (v *Var) Setint64(val int64) {
	v.Val = val
	v.Type = Constantint64
}

func (v *Var) Setfloat64(val float64) {
	v.Val = val
	v.Type = Constantfloat64
}

func Isint64(val Var) bool {
	return val.Type == Constantint64
}

func Isfloat64(val Var) bool {
	return val.Type == Constantfloat64
}

func Isstring(val Var) bool {
	return val.Type == Constantstring
}

func Isbool(val Var) bool {
	return val.Type == Constantbool
}

func Isnull(val Var) bool {
	return val.Type == Constantnull
}

func Isint64Simple(val interface{}) bool {
	_, ok := val.(int64)
	return ok
}

func Isfloat64Simple(val interface{}) bool {
	_, ok := val.(float64)
	return ok
}

func IsstringSimple(val interface{}) bool {
	_, ok := val.(string)
	return ok
}

func IsboolSimple(val interface{}) bool {
	_, ok := val.(bool)
	return ok
}
