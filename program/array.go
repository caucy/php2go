// Code generated by php2go. PLEASE DO NOT EDIT.
package array

import (
   "fmt"
)

type ValueType uint8

const (
	ConstantElementTypestring ValueType = iota
	Constantint64 ValueType = iota
	Constantstring ValueType = iota
	ConstantmapWithKeystringWithValuestring ValueType = iota
)

type Var struct {
	Val  interface{}
	Type ValueType
}

func NewVar() Var {
	return Var{}
}

func (v *Var) Bool() bool {
	switch v.Type {
	case ConstantElementTypestring:
		return false
	case Constantint64:
		return v.Val.(int64) != 0
	case Constantstring:
		return v.Val.(string) != ""
	case ConstantmapWithKeystringWithValuestring:
		return false
	}

	return false
}

func (v *Var) String() string {
	switch v.Type {
	case ConstantmapWithKeystringWithValuestring:
		return ""
	case ConstantElementTypestring:
		return ""
	case Constantint64:
		return fmt.Sprint(v.Val.(int64))
	case Constantstring:
		return v.Val.(string)
	}

	return ""
}


type CompareType uint8

const (
	Equal CompareType = iota
	NotEqual
	Greater
	GreaterEqual
	Smaller
	SmallerEqual
)

func (v *Var) CompareWithstring(val string, compare CompareType) bool {
	switch v.Type {
	case ConstantmapWithKeystringWithValuestring:
		return false
	case ConstantElementTypestring:
		return false
	case Constantint64:
		return false
	case Constantstring:
		switch compare {
		case Equal:
			return v.Val.(string) == val
		case NotEqual:
			return v.Val.(string) != val
		case Greater:
			return v.Val.(string) > val
		case GreaterEqual:
			return v.Val.(string) >= val
		case Smaller:
			return v.Val.(string) < val
		case SmallerEqual:
			return v.Val.(string) <= val
		}
	}

	return false
}

func (v *Var) CompareWithmapWithKeystringWithValuestring(val map[string]string, compare CompareType) bool {
	switch v.Type {
	case Constantstring:
		return false
	case ConstantmapWithKeystringWithValuestring:
		return false
	case ConstantElementTypestring:
		return false
	case Constantint64:
		return false
	}

	return false
}

func (v *Var) CompareWithElementTypestring(val []string, compare CompareType) bool {
	switch v.Type {
	case ConstantElementTypestring:
		return false
	case Constantint64:
		return false
	case Constantstring:
		return false
	case ConstantmapWithKeystringWithValuestring:
		return false
	}

	return false
}

func (v *Var) CompareWithint64(val int64, compare CompareType) bool {
	switch v.Type {
	case ConstantElementTypestring:
		return false
	case Constantint64:
		switch compare {
		case Equal:
			return v.Val.(int64) == val
		case NotEqual:
			return v.Val.(int64) != val
		case Greater:
			return v.Val.(int64) > val
		case GreaterEqual:
			return v.Val.(int64) >= val
		case Smaller:
			return v.Val.(int64) < val
		case SmallerEqual:
			return v.Val.(int64) <= val
		}
	case Constantstring:
		return false
	case ConstantmapWithKeystringWithValuestring:
		return false
	}

	return false
}

func (v *Var) GetElementTypestring() []string {
	return v.Val.([]string)
}

func (v *Var) Getint64() int64 {
	return v.Val.(int64)
}

func (v *Var) Getstring() string {
	return v.Val.(string)
}

func (v *Var) GetmapWithKeystringWithValuestring() map[string]string {
	return v.Val.(map[string]string)
}

func (v *Var) Setstring(val string)  {
	v.Val = val
	v.Type = Constantstring
}

func (v *Var) SetmapWithKeystringWithValuestring(val map[string]string)  {
	v.Val = val
	v.Type = ConstantmapWithKeystringWithValuestring
}

func (v *Var) SetElementTypestring(val []string)  {
	v.Val = val
	v.Type = ConstantElementTypestring
}

func (v *Var) Setint64(val int64)  {
	v.Val = val
	v.Type = Constantint64
}

func f() {
	arr := []string{"5"}
	for a, b := range arr {
		fmt.Print(a, b)
	}
	assocArray := map[string]string{"Key1": "1", "Key2": "2421"}
	for a, b := range assocArray {
		fmt.Print(a, b)
	}
}

