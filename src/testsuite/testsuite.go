package testsuite

import (
	"bytes"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"

	"github.com/i582/php2go/src/php/php7"
	"github.com/i582/php2go/src/root"

	"github.com/i582/php2go/src/generator"
)

type Suite struct {
	t        *testing.T
	Content  []byte
	Expected []byte
}

func NewSuite(t *testing.T) Suite {
	return Suite{
		t: t,
	}
}

func (s *Suite) AddFile(content []byte) {
	s.Content = content
}

func (s *Suite) AddExpected(content []byte) {
	s.Expected = content
}

func (s *Suite) RunTest() {
	parser := php7.NewParser(s.Content, "7.4")
	parser.Parse()

	for _, e := range parser.GetErrors() {
		s.t.Error(e)
	}

	rw := root.RootWalker{}

	rootNode := parser.GetRootNode()
	rootNode.Walk(&rw)

	main := bytes.NewBuffer(nil)
	core := bytes.NewBuffer(nil)
	gw := generator.NewGeneratorWalker(main, core, "test.php")
	rootNode.Walk(&gw)
	gw.Final()

	want := main.String()
	want = strings.TrimPrefix(main.String(), "// Code generated by php2go. PLEASE DO NOT EDIT.\n")
	want = strings.TrimSuffix(want, "\n")

	expected := string(s.Expected)
	expected = strings.TrimPrefix(expected, "\n")

	if !cmp.Equal(want, expected) {
		s.t.Error(cmp.Diff(want, expected))
	}
}
